/* This is stub file for gapi.client.{{=it.name}} definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('dfareporting', 'v2.8', () => {
        /** now we can use gapi.client.dfareporting */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** Manage DoubleClick Digital Marketing conversions */
            'https://www.googleapis.com/auth/ddmconversions',
            /** View and manage DoubleClick for Advertisers reports */
            'https://www.googleapis.com/auth/dfareporting',
            /** View and manage your DoubleClick Campaign Manager's (DCM) display ad campaigns */
            'https://www.googleapis.com/auth/dfatrafficking',
        ];
        const immediate = true;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle succesfull authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
        run();
    });

    async function run() {
        /** Gets the account's active ad summary by account ID. */
        await gapi.client.dfareporting.accountActiveAdSummaries.get({
            profileId: "profileId",
            summaryAccountId: "summaryAccountId",
        });
        /** Gets one account permission group by ID. */
        await gapi.client.dfareporting.accountPermissionGroups.get({
            id: "id",
            profileId: "profileId",
        });
        /** Retrieves the list of account permission groups. */
        await gapi.client.dfareporting.accountPermissionGroups.list({
            profileId: "profileId",
        });
        /** Gets one account permission by ID. */
        await gapi.client.dfareporting.accountPermissions.get({
            id: "id",
            profileId: "profileId",
        });
        /** Retrieves the list of account permissions. */
        await gapi.client.dfareporting.accountPermissions.list({
            profileId: "profileId",
        });
        /** Gets one account user profile by ID. */
        await gapi.client.dfareporting.accountUserProfiles.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new account user profile. */
        await gapi.client.dfareporting.accountUserProfiles.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of account user profiles, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.accountUserProfiles.list({
            active: true,
            ids: "ids",
            maxResults: 3,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
            subaccountId: "subaccountId",
            userRoleId: "userRoleId",
        });
        /** Updates an existing account user profile. This method supports patch semantics. */
        await gapi.client.dfareporting.accountUserProfiles.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing account user profile. */
        await gapi.client.dfareporting.accountUserProfiles.update({
            profileId: "profileId",
        });
        /** Gets one account by ID. */
        await gapi.client.dfareporting.accounts.get({
            id: "id",
            profileId: "profileId",
        });
        /** Retrieves the list of accounts, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.accounts.list({
            active: true,
            ids: "ids",
            maxResults: 3,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing account. This method supports patch semantics. */
        await gapi.client.dfareporting.accounts.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing account. */
        await gapi.client.dfareporting.accounts.update({
            profileId: "profileId",
        });
        /** Gets one ad by ID. */
        await gapi.client.dfareporting.ads.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new ad. */
        await gapi.client.dfareporting.ads.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of ads, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.ads.list({
            active: true,
            advertiserId: "advertiserId",
            archived: true,
            audienceSegmentIds: "audienceSegmentIds",
            campaignIds: "campaignIds",
            compatibility: "compatibility",
            creativeIds: "creativeIds",
            creativeOptimizationConfigurationIds: "creativeOptimizationConfigurationIds",
            dynamicClickTracker: true,
            ids: "ids",
            landingPageIds: "landingPageIds",
            maxResults: 12,
            overriddenEventTagId: "overriddenEventTagId",
            pageToken: "pageToken",
            placementIds: "placementIds",
            profileId: "profileId",
            remarketingListIds: "remarketingListIds",
            searchString: "searchString",
            sizeIds: "sizeIds",
            sortField: "sortField",
            sortOrder: "sortOrder",
            sslCompliant: true,
            sslRequired: true,
            type: "type",
        });
        /** Updates an existing ad. This method supports patch semantics. */
        await gapi.client.dfareporting.ads.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing ad. */
        await gapi.client.dfareporting.ads.update({
            profileId: "profileId",
        });
        /** Deletes an existing advertiser group. */
        await gapi.client.dfareporting.advertiserGroups.delete({
            id: "id",
            profileId: "profileId",
        });
        /** Gets one advertiser group by ID. */
        await gapi.client.dfareporting.advertiserGroups.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new advertiser group. */
        await gapi.client.dfareporting.advertiserGroups.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of advertiser groups, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.advertiserGroups.list({
            ids: "ids",
            maxResults: 2,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing advertiser group. This method supports patch semantics. */
        await gapi.client.dfareporting.advertiserGroups.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing advertiser group. */
        await gapi.client.dfareporting.advertiserGroups.update({
            profileId: "profileId",
        });
        /** Gets one advertiser by ID. */
        await gapi.client.dfareporting.advertisers.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new advertiser. */
        await gapi.client.dfareporting.advertisers.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of advertisers, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.advertisers.list({
            advertiserGroupIds: "advertiserGroupIds",
            floodlightConfigurationIds: "floodlightConfigurationIds",
            ids: "ids",
            includeAdvertisersWithoutGroupsOnly: true,
            maxResults: 5,
            onlyParent: true,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
            status: "status",
            subaccountId: "subaccountId",
        });
        /** Updates an existing advertiser. This method supports patch semantics. */
        await gapi.client.dfareporting.advertisers.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing advertiser. */
        await gapi.client.dfareporting.advertisers.update({
            profileId: "profileId",
        });
        /** Retrieves a list of browsers. */
        await gapi.client.dfareporting.browsers.list({
            profileId: "profileId",
        });
        /**
         * Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a
         * default ad does not exist already.
         */
        await gapi.client.dfareporting.campaignCreativeAssociations.insert({
            campaignId: "campaignId",
            profileId: "profileId",
        });
        /** Retrieves the list of creative IDs associated with the specified campaign. This method supports paging. */
        await gapi.client.dfareporting.campaignCreativeAssociations.list({
            campaignId: "campaignId",
            maxResults: 2,
            pageToken: "pageToken",
            profileId: "profileId",
            sortOrder: "sortOrder",
        });
        /** Gets one campaign by ID. */
        await gapi.client.dfareporting.campaigns.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new campaign. */
        await gapi.client.dfareporting.campaigns.insert({
            defaultLandingPageName: "defaultLandingPageName",
            defaultLandingPageUrl: "defaultLandingPageUrl",
            profileId: "profileId",
        });
        /** Retrieves a list of campaigns, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.campaigns.list({
            advertiserGroupIds: "advertiserGroupIds",
            advertiserIds: "advertiserIds",
            archived: true,
            atLeastOneOptimizationActivity: true,
            excludedIds: "excludedIds",
            ids: "ids",
            maxResults: 7,
            overriddenEventTagId: "overriddenEventTagId",
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
            subaccountId: "subaccountId",
        });
        /** Updates an existing campaign. This method supports patch semantics. */
        await gapi.client.dfareporting.campaigns.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing campaign. */
        await gapi.client.dfareporting.campaigns.update({
            profileId: "profileId",
        });
        /** Gets one change log by ID. */
        await gapi.client.dfareporting.changeLogs.get({
            id: "id",
            profileId: "profileId",
        });
        /** Retrieves a list of change logs. This method supports paging. */
        await gapi.client.dfareporting.changeLogs.list({
            action: "action",
            ids: "ids",
            maxChangeTime: "maxChangeTime",
            maxResults: 4,
            minChangeTime: "minChangeTime",
            objectIds: "objectIds",
            objectType: "objectType",
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            userProfileIds: "userProfileIds",
        });
        /** Retrieves a list of cities, possibly filtered. */
        await gapi.client.dfareporting.cities.list({
            countryDartIds: "countryDartIds",
            dartIds: "dartIds",
            namePrefix: "namePrefix",
            profileId: "profileId",
            regionDartIds: "regionDartIds",
        });
        /** Gets one connection type by ID. */
        await gapi.client.dfareporting.connectionTypes.get({
            id: "id",
            profileId: "profileId",
        });
        /** Retrieves a list of connection types. */
        await gapi.client.dfareporting.connectionTypes.list({
            profileId: "profileId",
        });
        /** Deletes an existing content category. */
        await gapi.client.dfareporting.contentCategories.delete({
            id: "id",
            profileId: "profileId",
        });
        /** Gets one content category by ID. */
        await gapi.client.dfareporting.contentCategories.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new content category. */
        await gapi.client.dfareporting.contentCategories.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of content categories, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.contentCategories.list({
            ids: "ids",
            maxResults: 2,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing content category. This method supports patch semantics. */
        await gapi.client.dfareporting.contentCategories.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing content category. */
        await gapi.client.dfareporting.contentCategories.update({
            profileId: "profileId",
        });
        /** Inserts conversions. */
        await gapi.client.dfareporting.conversions.batchinsert({
            profileId: "profileId",
        });
        /** Updates existing conversions. */
        await gapi.client.dfareporting.conversions.batchupdate({
            profileId: "profileId",
        });
        /** Gets one country by ID. */
        await gapi.client.dfareporting.countries.get({
            dartId: "dartId",
            profileId: "profileId",
        });
        /** Retrieves a list of countries. */
        await gapi.client.dfareporting.countries.list({
            profileId: "profileId",
        });
        /** Inserts a new creative asset. */
        await gapi.client.dfareporting.creativeAssets.insert({
            advertiserId: "advertiserId",
            profileId: "profileId",
        });
        /** Deletes an existing creative field value. */
        await gapi.client.dfareporting.creativeFieldValues.delete({
            creativeFieldId: "creativeFieldId",
            id: "id",
            profileId: "profileId",
        });
        /** Gets one creative field value by ID. */
        await gapi.client.dfareporting.creativeFieldValues.get({
            creativeFieldId: "creativeFieldId",
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new creative field value. */
        await gapi.client.dfareporting.creativeFieldValues.insert({
            creativeFieldId: "creativeFieldId",
            profileId: "profileId",
        });
        /** Retrieves a list of creative field values, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.creativeFieldValues.list({
            creativeFieldId: "creativeFieldId",
            ids: "ids",
            maxResults: 3,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing creative field value. This method supports patch semantics. */
        await gapi.client.dfareporting.creativeFieldValues.patch({
            creativeFieldId: "creativeFieldId",
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing creative field value. */
        await gapi.client.dfareporting.creativeFieldValues.update({
            creativeFieldId: "creativeFieldId",
            profileId: "profileId",
        });
        /** Deletes an existing creative field. */
        await gapi.client.dfareporting.creativeFields.delete({
            id: "id",
            profileId: "profileId",
        });
        /** Gets one creative field by ID. */
        await gapi.client.dfareporting.creativeFields.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new creative field. */
        await gapi.client.dfareporting.creativeFields.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of creative fields, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.creativeFields.list({
            advertiserIds: "advertiserIds",
            ids: "ids",
            maxResults: 3,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing creative field. This method supports patch semantics. */
        await gapi.client.dfareporting.creativeFields.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing creative field. */
        await gapi.client.dfareporting.creativeFields.update({
            profileId: "profileId",
        });
        /** Gets one creative group by ID. */
        await gapi.client.dfareporting.creativeGroups.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new creative group. */
        await gapi.client.dfareporting.creativeGroups.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of creative groups, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.creativeGroups.list({
            advertiserIds: "advertiserIds",
            groupNumber: 2,
            ids: "ids",
            maxResults: 4,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing creative group. This method supports patch semantics. */
        await gapi.client.dfareporting.creativeGroups.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing creative group. */
        await gapi.client.dfareporting.creativeGroups.update({
            profileId: "profileId",
        });
        /** Gets one creative by ID. */
        await gapi.client.dfareporting.creatives.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new creative. */
        await gapi.client.dfareporting.creatives.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of creatives, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.creatives.list({
            active: true,
            advertiserId: "advertiserId",
            archived: true,
            campaignId: "campaignId",
            companionCreativeIds: "companionCreativeIds",
            creativeFieldIds: "creativeFieldIds",
            ids: "ids",
            maxResults: 8,
            pageToken: "pageToken",
            profileId: "profileId",
            renderingIds: "renderingIds",
            searchString: "searchString",
            sizeIds: "sizeIds",
            sortField: "sortField",
            sortOrder: "sortOrder",
            studioCreativeId: "studioCreativeId",
            types: "types",
        });
        /** Updates an existing creative. This method supports patch semantics. */
        await gapi.client.dfareporting.creatives.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing creative. */
        await gapi.client.dfareporting.creatives.update({
            profileId: "profileId",
        });
        /** Retrieves list of report dimension values for a list of filters. */
        await gapi.client.dfareporting.dimensionValues.query({
            maxResults: 1,
            pageToken: "pageToken",
            profileId: "profileId",
        });
        /** Gets one directory site contact by ID. */
        await gapi.client.dfareporting.directorySiteContacts.get({
            id: "id",
            profileId: "profileId",
        });
        /** Retrieves a list of directory site contacts, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.directorySiteContacts.list({
            directorySiteIds: "directorySiteIds",
            ids: "ids",
            maxResults: 3,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Gets one directory site by ID. */
        await gapi.client.dfareporting.directorySites.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new directory site. */
        await gapi.client.dfareporting.directorySites.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of directory sites, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.directorySites.list({
            acceptsInStreamVideoPlacements: true,
            acceptsInterstitialPlacements: true,
            acceptsPublisherPaidPlacements: true,
            active: true,
            countryId: "countryId",
            dfpNetworkCode: "dfpNetworkCode",
            ids: "ids",
            maxResults: 8,
            pageToken: "pageToken",
            parentId: "parentId",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Deletes an existing dynamic targeting key. */
        await gapi.client.dfareporting.dynamicTargetingKeys.delete({
            name: "name",
            objectId: "objectId",
            objectType: "objectType",
            profileId: "profileId",
        });
        /**
         * Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or
         * placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
         */
        await gapi.client.dfareporting.dynamicTargetingKeys.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of dynamic targeting keys. */
        await gapi.client.dfareporting.dynamicTargetingKeys.list({
            advertiserId: "advertiserId",
            names: "names",
            objectId: "objectId",
            objectType: "objectType",
            profileId: "profileId",
        });
        /** Deletes an existing event tag. */
        await gapi.client.dfareporting.eventTags.delete({
            id: "id",
            profileId: "profileId",
        });
        /** Gets one event tag by ID. */
        await gapi.client.dfareporting.eventTags.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new event tag. */
        await gapi.client.dfareporting.eventTags.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of event tags, possibly filtered. */
        await gapi.client.dfareporting.eventTags.list({
            adId: "adId",
            advertiserId: "advertiserId",
            campaignId: "campaignId",
            definitionsOnly: true,
            enabled: true,
            eventTagTypes: "eventTagTypes",
            ids: "ids",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing event tag. This method supports patch semantics. */
        await gapi.client.dfareporting.eventTags.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing event tag. */
        await gapi.client.dfareporting.eventTags.update({
            profileId: "profileId",
        });
        /** Retrieves a report file by its report ID and file ID. This method supports media download. */
        await gapi.client.dfareporting.files.get({
            fileId: "fileId",
            reportId: "reportId",
        });
        /** Lists files for a user profile. */
        await gapi.client.dfareporting.files.list({
            maxResults: 1,
            pageToken: "pageToken",
            profileId: "profileId",
            scope: "scope",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Deletes an existing floodlight activity. */
        await gapi.client.dfareporting.floodlightActivities.delete({
            id: "id",
            profileId: "profileId",
        });
        /** Generates a tag for a floodlight activity. */
        await gapi.client.dfareporting.floodlightActivities.generatetag({
            floodlightActivityId: "floodlightActivityId",
            profileId: "profileId",
        });
        /** Gets one floodlight activity by ID. */
        await gapi.client.dfareporting.floodlightActivities.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new floodlight activity. */
        await gapi.client.dfareporting.floodlightActivities.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of floodlight activities, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.floodlightActivities.list({
            advertiserId: "advertiserId",
            floodlightActivityGroupIds: "floodlightActivityGroupIds",
            floodlightActivityGroupName: "floodlightActivityGroupName",
            floodlightActivityGroupTagString: "floodlightActivityGroupTagString",
            floodlightActivityGroupType: "floodlightActivityGroupType",
            floodlightConfigurationId: "floodlightConfigurationId",
            ids: "ids",
            maxResults: 8,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
            tagString: "tagString",
        });
        /** Updates an existing floodlight activity. This method supports patch semantics. */
        await gapi.client.dfareporting.floodlightActivities.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing floodlight activity. */
        await gapi.client.dfareporting.floodlightActivities.update({
            profileId: "profileId",
        });
        /** Gets one floodlight activity group by ID. */
        await gapi.client.dfareporting.floodlightActivityGroups.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new floodlight activity group. */
        await gapi.client.dfareporting.floodlightActivityGroups.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.floodlightActivityGroups.list({
            advertiserId: "advertiserId",
            floodlightConfigurationId: "floodlightConfigurationId",
            ids: "ids",
            maxResults: 4,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
            type: "type",
        });
        /** Updates an existing floodlight activity group. This method supports patch semantics. */
        await gapi.client.dfareporting.floodlightActivityGroups.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing floodlight activity group. */
        await gapi.client.dfareporting.floodlightActivityGroups.update({
            profileId: "profileId",
        });
        /** Gets one floodlight configuration by ID. */
        await gapi.client.dfareporting.floodlightConfigurations.get({
            id: "id",
            profileId: "profileId",
        });
        /** Retrieves a list of floodlight configurations, possibly filtered. */
        await gapi.client.dfareporting.floodlightConfigurations.list({
            ids: "ids",
            profileId: "profileId",
        });
        /** Updates an existing floodlight configuration. This method supports patch semantics. */
        await gapi.client.dfareporting.floodlightConfigurations.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing floodlight configuration. */
        await gapi.client.dfareporting.floodlightConfigurations.update({
            profileId: "profileId",
        });
        /** Gets one inventory item by ID. */
        await gapi.client.dfareporting.inventoryItems.get({
            id: "id",
            profileId: "profileId",
            projectId: "projectId",
        });
        /** Retrieves a list of inventory items, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.inventoryItems.list({
            ids: "ids",
            inPlan: true,
            maxResults: 3,
            orderId: "orderId",
            pageToken: "pageToken",
            profileId: "profileId",
            projectId: "projectId",
            siteId: "siteId",
            sortField: "sortField",
            sortOrder: "sortOrder",
            type: "type",
        });
        /** Deletes an existing campaign landing page. */
        await gapi.client.dfareporting.landingPages.delete({
            campaignId: "campaignId",
            id: "id",
            profileId: "profileId",
        });
        /** Gets one campaign landing page by ID. */
        await gapi.client.dfareporting.landingPages.get({
            campaignId: "campaignId",
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new landing page for the specified campaign. */
        await gapi.client.dfareporting.landingPages.insert({
            campaignId: "campaignId",
            profileId: "profileId",
        });
        /** Retrieves the list of landing pages for the specified campaign. */
        await gapi.client.dfareporting.landingPages.list({
            campaignId: "campaignId",
            profileId: "profileId",
        });
        /** Updates an existing campaign landing page. This method supports patch semantics. */
        await gapi.client.dfareporting.landingPages.patch({
            campaignId: "campaignId",
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing campaign landing page. */
        await gapi.client.dfareporting.landingPages.update({
            campaignId: "campaignId",
            profileId: "profileId",
        });
        /** Retrieves a list of languages. */
        await gapi.client.dfareporting.languages.list({
            profileId: "profileId",
        });
        /** Retrieves a list of metros. */
        await gapi.client.dfareporting.metros.list({
            profileId: "profileId",
        });
        /** Gets one mobile carrier by ID. */
        await gapi.client.dfareporting.mobileCarriers.get({
            id: "id",
            profileId: "profileId",
        });
        /** Retrieves a list of mobile carriers. */
        await gapi.client.dfareporting.mobileCarriers.list({
            profileId: "profileId",
        });
        /** Gets one operating system version by ID. */
        await gapi.client.dfareporting.operatingSystemVersions.get({
            id: "id",
            profileId: "profileId",
        });
        /** Retrieves a list of operating system versions. */
        await gapi.client.dfareporting.operatingSystemVersions.list({
            profileId: "profileId",
        });
        /** Gets one operating system by DART ID. */
        await gapi.client.dfareporting.operatingSystems.get({
            dartId: "dartId",
            profileId: "profileId",
        });
        /** Retrieves a list of operating systems. */
        await gapi.client.dfareporting.operatingSystems.list({
            profileId: "profileId",
        });
        /** Gets one order document by ID. */
        await gapi.client.dfareporting.orderDocuments.get({
            id: "id",
            profileId: "profileId",
            projectId: "projectId",
        });
        /** Retrieves a list of order documents, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.orderDocuments.list({
            approved: true,
            ids: "ids",
            maxResults: 3,
            orderId: "orderId",
            pageToken: "pageToken",
            profileId: "profileId",
            projectId: "projectId",
            searchString: "searchString",
            siteId: "siteId",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Gets one order by ID. */
        await gapi.client.dfareporting.orders.get({
            id: "id",
            profileId: "profileId",
            projectId: "projectId",
        });
        /** Retrieves a list of orders, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.orders.list({
            ids: "ids",
            maxResults: 2,
            pageToken: "pageToken",
            profileId: "profileId",
            projectId: "projectId",
            searchString: "searchString",
            siteId: "siteId",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Gets one placement group by ID. */
        await gapi.client.dfareporting.placementGroups.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new placement group. */
        await gapi.client.dfareporting.placementGroups.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of placement groups, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.placementGroups.list({
            advertiserIds: "advertiserIds",
            archived: true,
            campaignIds: "campaignIds",
            contentCategoryIds: "contentCategoryIds",
            directorySiteIds: "directorySiteIds",
            ids: "ids",
            maxEndDate: "maxEndDate",
            maxResults: 8,
            maxStartDate: "maxStartDate",
            minEndDate: "minEndDate",
            minStartDate: "minStartDate",
            pageToken: "pageToken",
            placementGroupType: "placementGroupType",
            placementStrategyIds: "placementStrategyIds",
            pricingTypes: "pricingTypes",
            profileId: "profileId",
            searchString: "searchString",
            siteIds: "siteIds",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing placement group. This method supports patch semantics. */
        await gapi.client.dfareporting.placementGroups.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing placement group. */
        await gapi.client.dfareporting.placementGroups.update({
            profileId: "profileId",
        });
        /** Deletes an existing placement strategy. */
        await gapi.client.dfareporting.placementStrategies.delete({
            id: "id",
            profileId: "profileId",
        });
        /** Gets one placement strategy by ID. */
        await gapi.client.dfareporting.placementStrategies.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new placement strategy. */
        await gapi.client.dfareporting.placementStrategies.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of placement strategies, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.placementStrategies.list({
            ids: "ids",
            maxResults: 2,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing placement strategy. This method supports patch semantics. */
        await gapi.client.dfareporting.placementStrategies.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing placement strategy. */
        await gapi.client.dfareporting.placementStrategies.update({
            profileId: "profileId",
        });
        /** Generates tags for a placement. */
        await gapi.client.dfareporting.placements.generatetags({
            campaignId: "campaignId",
            placementIds: "placementIds",
            profileId: "profileId",
            tagFormats: "tagFormats",
        });
        /** Gets one placement by ID. */
        await gapi.client.dfareporting.placements.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new placement. */
        await gapi.client.dfareporting.placements.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of placements, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.placements.list({
            advertiserIds: "advertiserIds",
            archived: true,
            campaignIds: "campaignIds",
            compatibilities: "compatibilities",
            contentCategoryIds: "contentCategoryIds",
            directorySiteIds: "directorySiteIds",
            groupIds: "groupIds",
            ids: "ids",
            maxEndDate: "maxEndDate",
            maxResults: 10,
            maxStartDate: "maxStartDate",
            minEndDate: "minEndDate",
            minStartDate: "minStartDate",
            pageToken: "pageToken",
            paymentSource: "paymentSource",
            placementStrategyIds: "placementStrategyIds",
            pricingTypes: "pricingTypes",
            profileId: "profileId",
            searchString: "searchString",
            siteIds: "siteIds",
            sizeIds: "sizeIds",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing placement. This method supports patch semantics. */
        await gapi.client.dfareporting.placements.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing placement. */
        await gapi.client.dfareporting.placements.update({
            profileId: "profileId",
        });
        /** Gets one platform type by ID. */
        await gapi.client.dfareporting.platformTypes.get({
            id: "id",
            profileId: "profileId",
        });
        /** Retrieves a list of platform types. */
        await gapi.client.dfareporting.platformTypes.list({
            profileId: "profileId",
        });
        /** Gets one postal code by ID. */
        await gapi.client.dfareporting.postalCodes.get({
            code: "code",
            profileId: "profileId",
        });
        /** Retrieves a list of postal codes. */
        await gapi.client.dfareporting.postalCodes.list({
            profileId: "profileId",
        });
        /** Gets one project by ID. */
        await gapi.client.dfareporting.projects.get({
            id: "id",
            profileId: "profileId",
        });
        /** Retrieves a list of projects, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.projects.list({
            advertiserIds: "advertiserIds",
            ids: "ids",
            maxResults: 3,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Retrieves a list of regions. */
        await gapi.client.dfareporting.regions.list({
            profileId: "profileId",
        });
        /** Gets one remarketing list share by remarketing list ID. */
        await gapi.client.dfareporting.remarketingListShares.get({
            profileId: "profileId",
            remarketingListId: "remarketingListId",
        });
        /** Updates an existing remarketing list share. This method supports patch semantics. */
        await gapi.client.dfareporting.remarketingListShares.patch({
            profileId: "profileId",
            remarketingListId: "remarketingListId",
        });
        /** Updates an existing remarketing list share. */
        await gapi.client.dfareporting.remarketingListShares.update({
            profileId: "profileId",
        });
        /** Gets one remarketing list by ID. */
        await gapi.client.dfareporting.remarketingLists.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new remarketing list. */
        await gapi.client.dfareporting.remarketingLists.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of remarketing lists, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.remarketingLists.list({
            active: true,
            advertiserId: "advertiserId",
            floodlightActivityId: "floodlightActivityId",
            maxResults: 4,
            name: "name",
            pageToken: "pageToken",
            profileId: "profileId",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing remarketing list. This method supports patch semantics. */
        await gapi.client.dfareporting.remarketingLists.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing remarketing list. */
        await gapi.client.dfareporting.remarketingLists.update({
            profileId: "profileId",
        });
        /** Deletes a report by its ID. */
        await gapi.client.dfareporting.reports.delete({
            profileId: "profileId",
            reportId: "reportId",
        });
        /** Retrieves a report by its ID. */
        await gapi.client.dfareporting.reports.get({
            profileId: "profileId",
            reportId: "reportId",
        });
        /** Creates a report. */
        await gapi.client.dfareporting.reports.insert({
            profileId: "profileId",
        });
        /** Retrieves list of reports. */
        await gapi.client.dfareporting.reports.list({
            maxResults: 1,
            pageToken: "pageToken",
            profileId: "profileId",
            scope: "scope",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates a report. This method supports patch semantics. */
        await gapi.client.dfareporting.reports.patch({
            profileId: "profileId",
            reportId: "reportId",
        });
        /** Runs a report. */
        await gapi.client.dfareporting.reports.run({
            profileId: "profileId",
            reportId: "reportId",
            synchronous: true,
        });
        /** Updates a report. */
        await gapi.client.dfareporting.reports.update({
            profileId: "profileId",
            reportId: "reportId",
        });
        /** Gets one site by ID. */
        await gapi.client.dfareporting.sites.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new site. */
        await gapi.client.dfareporting.sites.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of sites, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.sites.list({
            acceptsInStreamVideoPlacements: true,
            acceptsInterstitialPlacements: true,
            acceptsPublisherPaidPlacements: true,
            adWordsSite: true,
            approved: true,
            campaignIds: "campaignIds",
            directorySiteIds: "directorySiteIds",
            ids: "ids",
            maxResults: 9,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
            subaccountId: "subaccountId",
            unmappedSite: true,
        });
        /** Updates an existing site. This method supports patch semantics. */
        await gapi.client.dfareporting.sites.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing site. */
        await gapi.client.dfareporting.sites.update({
            profileId: "profileId",
        });
        /** Gets one size by ID. */
        await gapi.client.dfareporting.sizes.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new size. */
        await gapi.client.dfareporting.sizes.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of sizes, possibly filtered. */
        await gapi.client.dfareporting.sizes.list({
            height: 1,
            iabStandard: true,
            ids: "ids",
            profileId: "profileId",
            width: 5,
        });
        /** Gets one subaccount by ID. */
        await gapi.client.dfareporting.subaccounts.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new subaccount. */
        await gapi.client.dfareporting.subaccounts.insert({
            profileId: "profileId",
        });
        /** Gets a list of subaccounts, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.subaccounts.list({
            ids: "ids",
            maxResults: 2,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing subaccount. This method supports patch semantics. */
        await gapi.client.dfareporting.subaccounts.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing subaccount. */
        await gapi.client.dfareporting.subaccounts.update({
            profileId: "profileId",
        });
        /** Gets one remarketing list by ID. */
        await gapi.client.dfareporting.targetableRemarketingLists.get({
            id: "id",
            profileId: "profileId",
        });
        /** Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.targetableRemarketingLists.list({
            active: true,
            advertiserId: "advertiserId",
            maxResults: 3,
            name: "name",
            pageToken: "pageToken",
            profileId: "profileId",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Gets one targeting template by ID. */
        await gapi.client.dfareporting.targetingTemplates.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new targeting template. */
        await gapi.client.dfareporting.targetingTemplates.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of targeting templates, optionally filtered. This method supports paging. */
        await gapi.client.dfareporting.targetingTemplates.list({
            advertiserId: "advertiserId",
            ids: "ids",
            maxResults: 3,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
        });
        /** Updates an existing targeting template. This method supports patch semantics. */
        await gapi.client.dfareporting.targetingTemplates.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing targeting template. */
        await gapi.client.dfareporting.targetingTemplates.update({
            profileId: "profileId",
        });
        /** Gets one user profile by ID. */
        await gapi.client.dfareporting.userProfiles.get({
            profileId: "profileId",
        });
        /** Retrieves list of user profiles for a user. */
        await gapi.client.dfareporting.userProfiles.list({
        });
        /** Gets one user role permission group by ID. */
        await gapi.client.dfareporting.userRolePermissionGroups.get({
            id: "id",
            profileId: "profileId",
        });
        /** Gets a list of all supported user role permission groups. */
        await gapi.client.dfareporting.userRolePermissionGroups.list({
            profileId: "profileId",
        });
        /** Gets one user role permission by ID. */
        await gapi.client.dfareporting.userRolePermissions.get({
            id: "id",
            profileId: "profileId",
        });
        /** Gets a list of user role permissions, possibly filtered. */
        await gapi.client.dfareporting.userRolePermissions.list({
            ids: "ids",
            profileId: "profileId",
        });
        /** Deletes an existing user role. */
        await gapi.client.dfareporting.userRoles.delete({
            id: "id",
            profileId: "profileId",
        });
        /** Gets one user role by ID. */
        await gapi.client.dfareporting.userRoles.get({
            id: "id",
            profileId: "profileId",
        });
        /** Inserts a new user role. */
        await gapi.client.dfareporting.userRoles.insert({
            profileId: "profileId",
        });
        /** Retrieves a list of user roles, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.userRoles.list({
            accountUserRoleOnly: true,
            ids: "ids",
            maxResults: 3,
            pageToken: "pageToken",
            profileId: "profileId",
            searchString: "searchString",
            sortField: "sortField",
            sortOrder: "sortOrder",
            subaccountId: "subaccountId",
        });
        /** Updates an existing user role. This method supports patch semantics. */
        await gapi.client.dfareporting.userRoles.patch({
            id: "id",
            profileId: "profileId",
        });
        /** Updates an existing user role. */
        await gapi.client.dfareporting.userRoles.update({
            profileId: "profileId",
        });
        /** Gets one video format by ID. */
        await gapi.client.dfareporting.videoFormats.get({
            id: 1,
            profileId: "profileId",
        });
        /** Lists available video formats. */
        await gapi.client.dfareporting.videoFormats.list({
            profileId: "profileId",
        });
    }
});
