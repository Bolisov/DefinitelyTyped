/* This is stub file for gapi.client.{{=it.name}} definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('clouduseraccounts', 'vm_alpha', () => {
        /** now we can use gapi.client.clouduseraccounts */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform.read-only',
            /** Manage your Google Cloud User Accounts */
            'https://www.googleapis.com/auth/cloud.useraccounts',
            /** View your Google Cloud User Accounts */
            'https://www.googleapis.com/auth/cloud.useraccounts.readonly',
        ];
        const immediate = true;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle succesfull authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
        run();
    });

    async function run() {
        /** Deletes the specified operation resource. */
        await gapi.client.clouduseraccounts.globalAccountsOperations.delete({
            operation: "operation",
            project: "project",
        });
        /** Retrieves the specified operation resource. */
        await gapi.client.clouduseraccounts.globalAccountsOperations.get({
            operation: "operation",
            project: "project",
        });
        /** Retrieves the list of operation resources contained within the specified project. */
        await gapi.client.clouduseraccounts.globalAccountsOperations.list({
            filter: "filter",
            maxResults: 2,
            orderBy: "orderBy",
            pageToken: "pageToken",
            project: "project",
        });
        /** Adds users to the specified group. */
        await gapi.client.clouduseraccounts.groups.addMember({
            groupName: "groupName",
            project: "project",
        });
        /** Deletes the specified Group resource. */
        await gapi.client.clouduseraccounts.groups.delete({
            groupName: "groupName",
            project: "project",
        });
        /** Returns the specified Group resource. */
        await gapi.client.clouduseraccounts.groups.get({
            groupName: "groupName",
            project: "project",
        });
        /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
        await gapi.client.clouduseraccounts.groups.getIamPolicy({
            project: "project",
            resource: "resource",
        });
        /** Creates a Group resource in the specified project using the data included in the request. */
        await gapi.client.clouduseraccounts.groups.insert({
            project: "project",
        });
        /** Retrieves the list of groups contained within the specified project. */
        await gapi.client.clouduseraccounts.groups.list({
            filter: "filter",
            maxResults: 2,
            orderBy: "orderBy",
            pageToken: "pageToken",
            project: "project",
        });
        /** Removes users from the specified group. */
        await gapi.client.clouduseraccounts.groups.removeMember({
            groupName: "groupName",
            project: "project",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. */
        await gapi.client.clouduseraccounts.groups.setIamPolicy({
            project: "project",
            resource: "resource",
        });
        /** Returns permissions that a caller has on the specified resource. */
        await gapi.client.clouduseraccounts.groups.testIamPermissions({
            project: "project",
            resource: "resource",
        });
        /** Returns a list of authorized public keys for a specific user account. */
        await gapi.client.clouduseraccounts.linux.getAuthorizedKeysView({
            instance: "instance",
            login: true,
            project: "project",
            user: "user",
            zone: "zone",
        });
        /** Retrieves a list of user accounts for an instance within a specific project. */
        await gapi.client.clouduseraccounts.linux.getLinuxAccountViews({
            filter: "filter",
            instance: "instance",
            maxResults: 3,
            orderBy: "orderBy",
            pageToken: "pageToken",
            project: "project",
            zone: "zone",
        });
        /** Adds a public key to the specified User resource with the data included in the request. */
        await gapi.client.clouduseraccounts.users.addPublicKey({
            project: "project",
            user: "user",
        });
        /** Deletes the specified User resource. */
        await gapi.client.clouduseraccounts.users.delete({
            project: "project",
            user: "user",
        });
        /** Returns the specified User resource. */
        await gapi.client.clouduseraccounts.users.get({
            project: "project",
            user: "user",
        });
        /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
        await gapi.client.clouduseraccounts.users.getIamPolicy({
            project: "project",
            resource: "resource",
        });
        /** Creates a User resource in the specified project using the data included in the request. */
        await gapi.client.clouduseraccounts.users.insert({
            project: "project",
        });
        /** Retrieves a list of users contained within the specified project. */
        await gapi.client.clouduseraccounts.users.list({
            filter: "filter",
            maxResults: 2,
            orderBy: "orderBy",
            pageToken: "pageToken",
            project: "project",
        });
        /** Removes the specified public key from the user. */
        await gapi.client.clouduseraccounts.users.removePublicKey({
            fingerprint: "fingerprint",
            project: "project",
            user: "user",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. */
        await gapi.client.clouduseraccounts.users.setIamPolicy({
            project: "project",
            resource: "resource",
        });
        /** Returns permissions that a caller has on the specified resource. */
        await gapi.client.clouduseraccounts.users.testIamPermissions({
            project: "project",
            resource: "resource",
        });
    }
});
