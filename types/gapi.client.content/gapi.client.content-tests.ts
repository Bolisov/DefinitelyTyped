/* This is stub file for gapi.client.{{=it.name}} definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('content', 'v2', () => {
        /** now we can use gapi.client.content */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** Manage your product listings and accounts for Google Shopping */
            'https://www.googleapis.com/auth/content',
        ];
        const immediate = true;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle succesfull authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
        run();
    });

    async function run() {
        /** Returns information about the authenticated user. */
        await gapi.client.content.accounts.authinfo({
        });
        /** Claims the website of a Merchant Center sub-account. */
        await gapi.client.content.accounts.claimwebsite({
            accountId: "accountId",
            merchantId: "merchantId",
            overwrite: true,
        });
        /** Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request. */
        await gapi.client.content.accounts.custombatch({
            dryRun: true,
        });
        /** Deletes a Merchant Center sub-account. */
        await gapi.client.content.accounts.delete({
            accountId: "accountId",
            dryRun: true,
            force: true,
            merchantId: "merchantId",
        });
        /** Retrieves a Merchant Center account. */
        await gapi.client.content.accounts.get({
            accountId: "accountId",
            merchantId: "merchantId",
        });
        /** Creates a Merchant Center sub-account. */
        await gapi.client.content.accounts.insert({
            dryRun: true,
            merchantId: "merchantId",
        });
        /** Lists the sub-accounts in your Merchant Center account. */
        await gapi.client.content.accounts.list({
            maxResults: 1,
            merchantId: "merchantId",
            pageToken: "pageToken",
        });
        /** Updates a Merchant Center account. This method supports patch semantics. */
        await gapi.client.content.accounts.patch({
            accountId: "accountId",
            dryRun: true,
            merchantId: "merchantId",
        });
        /** Updates a Merchant Center account. */
        await gapi.client.content.accounts.update({
            accountId: "accountId",
            dryRun: true,
            merchantId: "merchantId",
        });
        await gapi.client.content.accountstatuses.custombatch({
        });
        /** Retrieves the status of a Merchant Center account. */
        await gapi.client.content.accountstatuses.get({
            accountId: "accountId",
            merchantId: "merchantId",
        });
        /** Lists the statuses of the sub-accounts in your Merchant Center account. */
        await gapi.client.content.accountstatuses.list({
            maxResults: 1,
            merchantId: "merchantId",
            pageToken: "pageToken",
        });
        /** Retrieves and updates tax settings of multiple accounts in a single request. */
        await gapi.client.content.accounttax.custombatch({
            dryRun: true,
        });
        /** Retrieves the tax settings of the account. */
        await gapi.client.content.accounttax.get({
            accountId: "accountId",
            merchantId: "merchantId",
        });
        /** Lists the tax settings of the sub-accounts in your Merchant Center account. */
        await gapi.client.content.accounttax.list({
            maxResults: 1,
            merchantId: "merchantId",
            pageToken: "pageToken",
        });
        /** Updates the tax settings of the account. This method supports patch semantics. */
        await gapi.client.content.accounttax.patch({
            accountId: "accountId",
            dryRun: true,
            merchantId: "merchantId",
        });
        /** Updates the tax settings of the account. */
        await gapi.client.content.accounttax.update({
            accountId: "accountId",
            dryRun: true,
            merchantId: "merchantId",
        });
        await gapi.client.content.datafeeds.custombatch({
            dryRun: true,
        });
        /** Deletes a datafeed configuration from your Merchant Center account. */
        await gapi.client.content.datafeeds.delete({
            datafeedId: "datafeedId",
            dryRun: true,
            merchantId: "merchantId",
        });
        /** Retrieves a datafeed configuration from your Merchant Center account. */
        await gapi.client.content.datafeeds.get({
            datafeedId: "datafeedId",
            merchantId: "merchantId",
        });
        /** Registers a datafeed configuration with your Merchant Center account. */
        await gapi.client.content.datafeeds.insert({
            dryRun: true,
            merchantId: "merchantId",
        });
        /** Lists the datafeeds in your Merchant Center account. */
        await gapi.client.content.datafeeds.list({
            maxResults: 1,
            merchantId: "merchantId",
            pageToken: "pageToken",
        });
        /** Updates a datafeed configuration of your Merchant Center account. This method supports patch semantics. */
        await gapi.client.content.datafeeds.patch({
            datafeedId: "datafeedId",
            dryRun: true,
            merchantId: "merchantId",
        });
        /** Updates a datafeed configuration of your Merchant Center account. */
        await gapi.client.content.datafeeds.update({
            datafeedId: "datafeedId",
            dryRun: true,
            merchantId: "merchantId",
        });
        await gapi.client.content.datafeedstatuses.custombatch({
        });
        /** Retrieves the status of a datafeed from your Merchant Center account. */
        await gapi.client.content.datafeedstatuses.get({
            country: "country",
            datafeedId: "datafeedId",
            language: "language",
            merchantId: "merchantId",
        });
        /** Lists the statuses of the datafeeds in your Merchant Center account. */
        await gapi.client.content.datafeedstatuses.list({
            maxResults: 1,
            merchantId: "merchantId",
            pageToken: "pageToken",
        });
        /** Updates price and availability for multiple products or stores in a single request. This operation does not update the expiration date of the products. */
        await gapi.client.content.inventory.custombatch({
            dryRun: true,
        });
        /** Updates price and availability of a product in your Merchant Center account. */
        await gapi.client.content.inventory.set({
            dryRun: true,
            merchantId: "merchantId",
            productId: "productId",
            storeCode: "storeCode",
        });
        /** Marks an order as acknowledged. */
        await gapi.client.content.orders.acknowledge({
            merchantId: "merchantId",
            orderId: "orderId",
        });
        /** Sandbox only. Moves a test order from state "inProgress" to state "pendingShipment". */
        await gapi.client.content.orders.advancetestorder({
            merchantId: "merchantId",
            orderId: "orderId",
        });
        /** Cancels all line items in an order, making a full refund. */
        await gapi.client.content.orders.cancel({
            merchantId: "merchantId",
            orderId: "orderId",
        });
        /** Cancels a line item, making a full refund. */
        await gapi.client.content.orders.cancellineitem({
            merchantId: "merchantId",
            orderId: "orderId",
        });
        /** Sandbox only. Creates a test order. */
        await gapi.client.content.orders.createtestorder({
            merchantId: "merchantId",
        });
        /** Retrieves or modifies multiple orders in a single request. */
        await gapi.client.content.orders.custombatch({
        });
        /** Retrieves an order from your Merchant Center account. */
        await gapi.client.content.orders.get({
            merchantId: "merchantId",
            orderId: "orderId",
        });
        /** Retrieves an order using merchant order id. */
        await gapi.client.content.orders.getbymerchantorderid({
            merchantId: "merchantId",
            merchantOrderId: "merchantOrderId",
        });
        /** Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox. */
        await gapi.client.content.orders.gettestordertemplate({
            merchantId: "merchantId",
            templateName: "templateName",
        });
        /** Lists the orders in your Merchant Center account. */
        await gapi.client.content.orders.list({
            acknowledged: true,
            maxResults: 2,
            merchantId: "merchantId",
            orderBy: "orderBy",
            pageToken: "pageToken",
            placedDateEnd: "placedDateEnd",
            placedDateStart: "placedDateStart",
            statuses: "statuses",
        });
        /** Refund a portion of the order, up to the full amount paid. */
        await gapi.client.content.orders.refund({
            merchantId: "merchantId",
            orderId: "orderId",
        });
        /** Returns a line item. */
        await gapi.client.content.orders.returnlineitem({
            merchantId: "merchantId",
            orderId: "orderId",
        });
        /** Marks line item(s) as shipped. */
        await gapi.client.content.orders.shiplineitems({
            merchantId: "merchantId",
            orderId: "orderId",
        });
        /** Updates the merchant order ID for a given order. */
        await gapi.client.content.orders.updatemerchantorderid({
            merchantId: "merchantId",
            orderId: "orderId",
        });
        /** Updates a shipment's status, carrier, and/or tracking ID. */
        await gapi.client.content.orders.updateshipment({
            merchantId: "merchantId",
            orderId: "orderId",
        });
        /** Retrieves, inserts, and deletes multiple products in a single request. */
        await gapi.client.content.products.custombatch({
            dryRun: true,
        });
        /** Deletes a product from your Merchant Center account. */
        await gapi.client.content.products.delete({
            dryRun: true,
            merchantId: "merchantId",
            productId: "productId",
        });
        /** Retrieves a product from your Merchant Center account. */
        await gapi.client.content.products.get({
            merchantId: "merchantId",
            productId: "productId",
        });
        /**
         * Uploads a product to your Merchant Center account. If an item with the same channel, contentLanguage, offerId, and targetCountry already exists, this
         * method updates that entry.
         */
        await gapi.client.content.products.insert({
            dryRun: true,
            merchantId: "merchantId",
        });
        /** Lists the products in your Merchant Center account. */
        await gapi.client.content.products.list({
            includeInvalidInsertedItems: true,
            maxResults: 2,
            merchantId: "merchantId",
            pageToken: "pageToken",
        });
        /** Gets the statuses of multiple products in a single request. */
        await gapi.client.content.productstatuses.custombatch({
            includeAttributes: true,
        });
        /** Gets the status of a product from your Merchant Center account. */
        await gapi.client.content.productstatuses.get({
            includeAttributes: true,
            merchantId: "merchantId",
            productId: "productId",
        });
        /** Lists the statuses of the products in your Merchant Center account. */
        await gapi.client.content.productstatuses.list({
            includeAttributes: true,
            includeInvalidInsertedItems: true,
            maxResults: 3,
            merchantId: "merchantId",
            pageToken: "pageToken",
        });
        /** Retrieves and updates the shipping settings of multiple accounts in a single request. */
        await gapi.client.content.shippingsettings.custombatch({
            dryRun: true,
        });
        /** Retrieves the shipping settings of the account. */
        await gapi.client.content.shippingsettings.get({
            accountId: "accountId",
            merchantId: "merchantId",
        });
        /** Retrieves supported carriers and carrier services for an account. */
        await gapi.client.content.shippingsettings.getsupportedcarriers({
            merchantId: "merchantId",
        });
        /** Lists the shipping settings of the sub-accounts in your Merchant Center account. */
        await gapi.client.content.shippingsettings.list({
            maxResults: 1,
            merchantId: "merchantId",
            pageToken: "pageToken",
        });
        /** Updates the shipping settings of the account. This method supports patch semantics. */
        await gapi.client.content.shippingsettings.patch({
            accountId: "accountId",
            dryRun: true,
            merchantId: "merchantId",
        });
        /** Updates the shipping settings of the account. */
        await gapi.client.content.shippingsettings.update({
            accountId: "accountId",
            dryRun: true,
            merchantId: "merchantId",
        });
    }
});
