// Type definitions for Google Android Device Provisioning Partner API v1 1.0
// Project: https://developers.google.com/zero-touch/
// Definitions by: Bolisov Alexey <https://github.com/Bolisov>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.3

/** IMPORTANT.  */
/** This file was generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually. */
/** In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator */
/** Generated from: https://androiddeviceprovisioning.googleapis.com/$discovery/rest?version=v1 */

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Android Device Provisioning Partner API v1 */
    function load(name: "androiddeviceprovisioning", version: "v1"): PromiseLike<void>;    
    function load(name: "androiddeviceprovisioning", version: "v1", callback: () => any): void;    
    
    const operations: androiddeviceprovisioning.OperationsResource; 
    
    const partners: androiddeviceprovisioning.PartnersResource; 
    
    namespace androiddeviceprovisioning {
        
        interface PerDeviceStatusInBatch {
            /** Process result. */
            status?: string;
            /** Error identifier. */
            errorIdentifier?: string;
            /** Error message */
            errorMessage?: string;
            /** device id of the device if process succeeds. */
            deviceId?: string;
        }
        
        interface ClaimDevicesRequest {
            /** list of claims. */
            claims?: PartnerClaim[];
        }
        
        interface FindDevicesByOwnerRequest {
            /** The section type. */
            sectionType?: string;
            /** Page token */
            pageToken?: string;
            /** List of customer ids to search for. */
            customerId?: string[];
            /** The number of devices to show in the result. */
            limit?: string;
        }
        
        interface Operation {
            /** This field will contain a `DevicesLongRunningOperationResponse` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`. */
            response?: Record<string, any>;            
            /** The server-assigned name, which is only unique within the same service that */
            /** originally returns it. If you use the default HTTP mapping, the */
            /** `name` should have the format of `operations/some/unique/name`. */
            name?: string;
            /** This field will always be not set if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`. In this case, error information for each device is set in `response.perDeviceStatus.result.status`. */
            error?: Status;
            /** This field will contain a `DevicesLongRunningOperationMetadata` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`. */
            metadata?: Record<string, any>;            
            /** If the value is `false`, it means the operation is still in progress. */
            /** If true, the operation is completed, and either `error` or `response` is */
            /** available. */
            done?: boolean;
        }
        
        interface DeviceIdentifier {
            /** Serial number (optional) */
            serialNumber?: string;
            /** IMEI */
            imei?: string;
            /** Manufacturer name to match `android.os.Build.MANUFACTURER` (required). */
            /** Allowed values listed in */
            /** [manufacturer names](/zero-touch/resources/manufacturer-names). */
            manufacturer?: string;
            /** MEID */
            meid?: string;
        }
        
        interface UnclaimDevicesRequest {
            /** list of unclaims. */
            unclaims?: PartnerUnclaim[];
        }
        
        interface Status {
            /** A developer-facing error message, which should be in English. Any */
            /** user-facing error message should be localized and sent in the */
            /** google.rpc.Status.details field, or localized by the client. */
            message?: string;
            /** A list of messages that carry the error details.  There is a common set of */
            /** message types for APIs to use. */
            details?: Array<Record<string, any>>;            
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
        }
        
        interface FindDevicesByDeviceIdentifierRequest {
            /** Number of devices to show. */
            limit?: string;
            /** The device identifier to search */
            deviceIdentifier?: DeviceIdentifier;
            /** Page token */
            pageToken?: string;
        }
        
        interface OperationPerDevice {
            /** Request to set metadata for a device. */
            updateMetadata?: UpdateMetadataArguments;
            /** Processing result for every device. */
            result?: PerDeviceStatusInBatch;
            /** Request to unclaim a device. */
            unclaim?: PartnerUnclaim;
            /** Request to claim a device. */
            claim?: PartnerClaim;
        }
        
        interface FindDevicesByOwnerResponse {
            /** Devices found. */
            devices?: Device[];
            /** Page token of next page */
            nextPageToken?: string;
        }
        
        interface DevicesLongRunningOperationMetadata {
            /** Processing progress from 0 to 100. */
            progress?: number;
            /** Number of devices parsed in your requests. */
            devicesCount?: number;
            /** The overall processing status. */
            processingStatus?: string;
        }
        
        interface ClaimDeviceRequest {
            /** The device identifier of the device to claim. */
            deviceIdentifier?: DeviceIdentifier;
            /** Section to claim */
            sectionType?: string;
            /** The customer to claim for. */
            customerId?: string;
        }
        
        interface UpdateDeviceMetadataInBatchRequest {
            /** list of metadata updates. */
            updates?: UpdateMetadataArguments[];
        }
        
        interface UpdateMetadataArguments {
            /** The metadata to update. */
            deviceMetadata?: DeviceMetadata;
            /** device identifier. */
            deviceIdentifier?: DeviceIdentifier;
            /** device id of the device. */
            deviceId?: string;
        }
        
        interface ListCustomersResponse {
            /** List of customers related to this partner. */
            customers?: Company[];
        }
        
        interface ClaimDeviceResponse {
            /** the device id of the claimed device. */
            deviceId?: string;
            /** the resource name of the device in */
            /** 'partners/[PARTNER_ID]/devices/[DEVICE_ID]'. */
            deviceName?: string;
        }
        
        interface Device {
            /** Device id */
            deviceId?: string;
            /** The resource name of the configuration. */
            /** Only set for customers. */
            configuration?: string;
            /** claims */
            claims?: DeviceClaim[];
            /** Device identifier */
            deviceIdentifier?: DeviceIdentifier;
            /** Device metadata */
            deviceMetadata?: DeviceMetadata;
            /** Resource name in 'partners/[PARTNER_ID]/devices/[DEVICE_ID]'. */
            name?: string;
        }
        
        interface Company {
            /** Admin email. */
            /** Admins will be able to operate on the portal. */
            /** This field is a WRITE-only field at creation time. */
            adminEmails?: string[];
            /** REST Resource name. */
            name?: string;
            /** company name */
            companyName?: string;
            /** Owner email. */
            /** Owner is able to operate on the portal, and modify admins and other owners. */
            /** This field is a WRITE-only field at creation time. */
            ownerEmails?: string[];
            /** company id */
            companyId?: string;
        }
        
        interface UpdateDeviceMetadataRequest {
            /** The metdata to set. */
            deviceMetadata?: DeviceMetadata;
        }
        
        interface PartnerUnclaim {
            /** device identifier of the device. */
            deviceIdentifier?: DeviceIdentifier;
            /** section type to unclaim. */
            sectionType?: string;
            /** device id of the device. */
            deviceId?: string;
        }
        
        interface FindDevicesByDeviceIdentifierResponse {
            /** Found devices. */
            devices?: Device[];
            /** Page token of next page */
            nextPageToken?: string;
        }
        
        interface PartnerClaim {
            /** metadata to set at claim. */
            deviceMetadata?: DeviceMetadata;
            /** Device identifier of the device. */
            deviceIdentifier?: DeviceIdentifier;
            /** section type to claim. */
            sectionType?: string;
            /** customer id to claim for. */
            customerId?: string;
        }
        
        interface UnclaimDeviceRequest {
            /** The device id returned by ClaimDevice. */
            deviceId?: string;
            /** The device identifier you use when you claimed this device. */
            deviceIdentifier?: DeviceIdentifier;
            /** The section type to unclaim for. */
            sectionType?: string;
        }
        
        interface DeviceMetadata {
            /** Metadata entries */
            entries?: Record<string, string>;            
        }
        
        interface DeviceClaim {
            /** owner id */
            ownerCompanyId?: string;
            /** section type. */
            sectionType?: string;
        }
        
        interface DevicesLongRunningOperationResponse {
            /** processing status for each device. */
            /** One PerDeviceStatus per device. The order is the same as in your requests. */
            perDeviceStatus?: OperationPerDevice[];
            /** Number of succeesfully processed ones. */
            successCount?: number;
        }
        
        interface OperationsResource {
            /** Gets the latest state of a long-running operation.  Clients can use this */
            /** method to poll the operation result at intervals as recommended by the API */
            /** service. */
            get(request: {            
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** JSONP */
                callback?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth access token. */
                access_token?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the operation resource. */
                name: string;
            }): Request<Operation>;            
            
        }
        
        interface DevicesResource {
            /** Unclaim the device identified by device_id or identifier. */
            unclaim(request: {            
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** JSONP */
                callback?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth access token. */
                access_token?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Id of the partner. */
                partnerId: string;
            }): Request<{}>;            
            
            /** Find devices by ownership. */
            findByOwner(request: {            
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** JSONP */
                callback?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth access token. */
                access_token?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** id of the partner. */
                partnerId: string;
            }): Request<FindDevicesByOwnerResponse>;            
            
            /** Claim the device identified by device identifier. */
            claim(request: {            
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** JSONP */
                callback?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth access token. */
                access_token?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Id of the partner. */
                partnerId: string;
            }): Request<ClaimDeviceResponse>;            
            
            /** Claim devices asynchronously */
            claimAsync(request: {            
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** JSONP */
                callback?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth access token. */
                access_token?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** partner id. */
                partnerId: string;
            }): Request<Operation>;            
            
            /** Find devices by device identifier. */
            findByIdentifier(request: {            
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** JSONP */
                callback?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth access token. */
                access_token?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** id of the partner. */
                partnerId: string;
            }): Request<FindDevicesByDeviceIdentifierResponse>;            
            
            /** Unclaim devices asynchronously */
            unclaimAsync(request: {            
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** JSONP */
                callback?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth access token. */
                access_token?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** partner id. */
                partnerId: string;
            }): Request<Operation>;            
            
            /** Update the metadata */
            metadata(request: {            
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** JSONP */
                callback?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth access token. */
                access_token?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The owner of the newly set metadata. Should be partner id itself. */
                metadataOwnerId: string;
                /** id of the partner. */
                deviceId: string;
            }): Request<DeviceMetadata>;            
            
            /** Set metadata in batch asynchronously. */
            updateMetadataAsync(request: {            
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** JSONP */
                callback?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth access token. */
                access_token?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** partner id. */
                partnerId: string;
            }): Request<Operation>;            
            
            /** Get a device */
            get(request: {            
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** JSONP */
                callback?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth access token. */
                access_token?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** resource name in 'partners/[PARTNER_ID]/devices/[DEVICE_ID]'. */
                name: string;
            }): Request<Device>;            
            
        }
        
        interface CustomersResource {
            /** List all the customers that has delegates some role to this customer. */
            list(request: {            
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** V1 error format. */
                "$.xgafv"?: string;
                /** JSONP */
                callback?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth access token. */
                access_token?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** the id of the partner. */
                partnerId: string;
            }): Request<ListCustomersResponse>;            
            
        }
        
        interface PartnersResource {
            devices: DevicesResource;
            customers: CustomersResource;
        }
    }
}
